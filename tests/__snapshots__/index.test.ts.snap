// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`babel-plugin-ts-definitions-to-proptypes supports custom prop type suffixes 1`] = `
"import React from 'react';
import PropTypes from 'prop-types';
const NameShape = PropTypes.string;
const AgePropType = PropTypes.number;
type NameShape = string;
type AgePropType = number;
type HeightUnsupported = number;
export interface Props {
  name: NameShape;
  nameOpt?: NameShape;
  age: AgePropType;
  ageOpt?: AgePropType;
  both: NameShape | AgePropType | boolean;
  height: HeightUnsupported;
}
export const Props = {
  name: NameShape.isRequired,
  nameOpt: NameShape,
  age: AgePropType.isRequired,
  ageOpt: AgePropType,
  both: PropTypes.oneOfType([NameShape, AgePropType, PropTypes.bool]).isRequired,
  height: PropTypes.any.isRequired
};"
`;

exports[`babel-plugin-ts-definitions-to-proptypes transforms ./fixtures/avoids-state.ts 1`] = `
"import _pt from 'prop-types';
import React from 'react';
export interface Props {
  name: string;
}
export const Props = {
  name: _pt.string.isRequired
};
export interface State {
  age: number;
}
export const State = {
  age: _pt.number.isRequired
};"
`;

exports[`babel-plugin-ts-definitions-to-proptypes transforms ./fixtures/class/custom-react-import-name.ts 1`] = `
"import _pt from 'prop-types';
import R from 'react';
interface Props {
  name: string;
}
const Props = {
  name: _pt.string.isRequired
};"
`;

exports[`babel-plugin-ts-definitions-to-proptypes transforms ./fixtures/class/custom-react-import-name-pure.ts 1`] = `
"import _pt from 'prop-types';
import R from 'react';
interface Props {
  name: string;
}
const Props = {
  name: _pt.string.isRequired
};"
`;

exports[`babel-plugin-ts-definitions-to-proptypes transforms ./fixtures/class/default-props.ts 1`] = `
"import _pt from 'prop-types';
import React from 'react';
interface Props {
  name: string;
}
const Props = {
  name: _pt.string.isRequired
};"
`;

exports[`babel-plugin-ts-definitions-to-proptypes transforms ./fixtures/class/extended-interfaces.ts 1`] = `
"import _pt from 'prop-types';
import React from 'react';
export interface AProps {
  a: number;
}
export const AProps = {
  a: _pt.number.isRequired
};
export interface BProps {
  b: boolean;
}
export const BProps = {
  b: _pt.bool.isRequired
};
export interface Props extends AProps, BProps {
  name: string;
}
export const Props = {
  a: _pt.number.isRequired,
  b: _pt.bool.isRequired,
  name: _pt.string.isRequired
};"
`;

exports[`babel-plugin-ts-definitions-to-proptypes transforms ./fixtures/class/extended-type-aliases.ts 1`] = `
"import _pt from 'prop-types';
import React from 'react';
export type AProps = {
  a: number;
};
export const AProps = {
  a: _pt.number.isRequired
};
export type BProps = {
  b: boolean;
};
export const BProps = {
  b: _pt.bool.isRequired
};
export type Props = AProps & BProps & {
  name: string;
};
export const Props = {
  a: _pt.number.isRequired,
  b: _pt.bool.isRequired,
  name: _pt.string.isRequired
};"
`;

exports[`babel-plugin-ts-definitions-to-proptypes transforms ./fixtures/class/merge-with-existing-proptypes.ts 1`] = `
"import React from 'react';
import PropTypes from 'prop-types';
interface Props {
  name: string;
}
const Props = {
  name: PropTypes.string.isRequired
};"
`;

exports[`babel-plugin-ts-definitions-to-proptypes transforms ./fixtures/class/merge-with-no-override.ts 1`] = `
"import React from 'react';
import PropTypes from 'prop-types';
interface Props {
  name: string;
}
const Props = {
  name: PropTypes.string.isRequired
};
const CustomShape = PropTypes.string;"
`;

exports[`babel-plugin-ts-definitions-to-proptypes transforms ./fixtures/class/missing-type.ts 1`] = `"import React from 'react';"`;

exports[`babel-plugin-ts-definitions-to-proptypes transforms ./fixtures/class/multiple-generics.ts 1`] = `
"import _pt from 'prop-types';
import React from 'react';
export interface AProps {
  a: number;
}
export const AProps = {
  a: _pt.number.isRequired
};
export interface BProps {
  b: boolean;
}
export const BProps = {
  b: _pt.bool.isRequired
};"
`;

exports[`babel-plugin-ts-definitions-to-proptypes transforms ./fixtures/class/named-react-imports.ts 1`] = `
"import _pt from 'prop-types';
import React, { Component } from 'react';
interface Props {
  name: string;
}
const Props = {
  name: _pt.string.isRequired
};"
`;

exports[`babel-plugin-ts-definitions-to-proptypes transforms ./fixtures/class/named-react-imports-pure.ts 1`] = `
"import _pt from 'prop-types';
import React, { PureComponent } from 'react';
interface Props {
  name: string;
}
const Props = {
  name: _pt.string.isRequired
};"
`;

exports[`babel-plugin-ts-definitions-to-proptypes transforms ./fixtures/class/no-generics.ts 1`] = `"import React from 'react';"`;

exports[`babel-plugin-ts-definitions-to-proptypes transforms ./fixtures/class/no-type-propeties.ts 1`] = `
"import React from 'react';
interface Props {}"
`;

exports[`babel-plugin-ts-definitions-to-proptypes transforms ./fixtures/class/standard.ts 1`] = `
"import _pt from 'prop-types';
import React from 'react';
interface Props {
  name: string;
}
const Props = {
  name: _pt.string.isRequired
};"
`;

exports[`babel-plugin-ts-definitions-to-proptypes transforms ./fixtures/custom-prop-types-import-name.ts 1`] = `
"import React from 'react';
import PT from 'prop-types';
export interface Props {
  name: string;
}
export const Props = {
  name: PT.string.isRequired
};"
`;

exports[`babel-plugin-ts-definitions-to-proptypes transforms ./fixtures/custom-prop-types-import-namespace.ts 1`] = `
"import * as React from 'react';
import * as PT from 'prop-types';
export interface Props {
  name: string;
}
export const Props = {
  name: PT.string.isRequired
};"
`;

exports[`babel-plugin-ts-definitions-to-proptypes transforms ./fixtures/custom-prop-types-named-no-default.ts 1`] = `
"import React from 'react';
import PropTypes, { ValidationMap } from 'prop-types';
export interface Props {
  name: string;
}
export const Props = {
  name: PropTypes.string.isRequired
};"
`;

exports[`babel-plugin-ts-definitions-to-proptypes transforms ./fixtures/custom-react-import-name.ts 1`] = `
"import _pt from 'prop-types';
import R from 'react';
export interface Props {
  name: string;
}
export const Props = {
  name: _pt.string.isRequired
};"
`;

exports[`babel-plugin-ts-definitions-to-proptypes transforms ./fixtures/custom-react-import-namespace.ts 1`] = `
"import _pt from 'prop-types';
import * as R from 'react';
export interface Props {
  name: string;
}
export const Props = {
  name: _pt.string.isRequired
};"
`;

exports[`babel-plugin-ts-definitions-to-proptypes transforms ./fixtures/function/custom-react-import-name.ts 1`] = `
"import _pt from 'prop-types';
import R from 'react';
interface Props {
  name: string;
}
const Props = {
  name: _pt.string.isRequired
};
export default function FuncCustomReactImportName(props: Props) {
  return null;
}"
`;

exports[`babel-plugin-ts-definitions-to-proptypes transforms ./fixtures/function/default-props.ts 1`] = `
"import _pt from 'prop-types';
import React from 'react';
interface Props {
  name: string;
}
const Props = {
  name: _pt.string.isRequired
};
export default function FuncDefaultProps(props: Props) {
  return null;
}
FuncDefaultProps.defaultProps = {
  name: 'Foo'
};"
`;

exports[`babel-plugin-ts-definitions-to-proptypes transforms ./fixtures/function/export-default.ts 1`] = `
"import _pt from 'prop-types';
import React from 'react';
interface Props {
  name: string;
}
const Props = {
  name: _pt.string.isRequired
};
export default function FuncExportDefault(props: Props) {
  return null;
}"
`;

exports[`babel-plugin-ts-definitions-to-proptypes transforms ./fixtures/function/export-named.ts 1`] = `
"import _pt from 'prop-types';
import React from 'react';
interface Props {
  name: string;
}
const Props = {
  name: _pt.string.isRequired
};
export function FuncExportNamed(props: Props) {
  return null;
}"
`;

exports[`babel-plugin-ts-definitions-to-proptypes transforms ./fixtures/function/extended-interfaces.ts 1`] = `
"import _pt from 'prop-types';
import React from 'react';
export interface AProps {
  a: number;
}
export const AProps = {
  a: _pt.number.isRequired
};
export interface BProps {
  b: boolean;
}
export const BProps = {
  b: _pt.bool.isRequired
};
export interface Props extends AProps, BProps {
  name: string;
}
export const Props = {
  a: _pt.number.isRequired,
  b: _pt.bool.isRequired,
  name: _pt.string.isRequired
};
export default function FuncExtendedInterfaces(props: Props) {
  return null;
}"
`;

exports[`babel-plugin-ts-definitions-to-proptypes transforms ./fixtures/function/extended-type-aliases.ts 1`] = `
"import _pt from 'prop-types';
import React from 'react';
export type AProps = {
  a: number;
};
export const AProps = {
  a: _pt.number.isRequired
};
export type BProps = {
  b: boolean;
};
export const BProps = {
  b: _pt.bool.isRequired
};
export type Props = AProps & BProps & {
  name: string;
};
export const Props = {
  a: _pt.number.isRequired,
  b: _pt.bool.isRequired,
  name: _pt.string.isRequired
};
export default function FuncExtendedTypeAliases(props: Props) {
  return null;
}"
`;

exports[`babel-plugin-ts-definitions-to-proptypes transforms ./fixtures/function/merge-with-existing-proptypes.ts 1`] = `
"import React from 'react';
import PropTypes from 'prop-types';
interface Props {
  name: string;
}
const Props = {
  name: PropTypes.string.isRequired
};
export default function FuncMergeWithExistingPropTypes(props: Props) {
  return null;
}
FuncMergeWithExistingPropTypes.propTypes = {
  custom: PropTypes.number.isRequired
};"
`;

exports[`babel-plugin-ts-definitions-to-proptypes transforms ./fixtures/function/merge-with-no-override.ts 1`] = `
"import React from 'react';
import PropTypes from 'prop-types';
interface Props {
  name: string;
}
const Props = {
  name: PropTypes.string.isRequired
};
const CustomShape = PropTypes.string;
export default function FuncMergeWithNoOverride(props: Props) {
  return null;
}
FuncMergeWithNoOverride.propTypes = {
  name: CustomShape.isRequired
};"
`;

exports[`babel-plugin-ts-definitions-to-proptypes transforms ./fixtures/function/missing-type.ts 1`] = `
"import React from 'react';
export default function FuncMissingType(props: Props) {
  return null;
}"
`;

exports[`babel-plugin-ts-definitions-to-proptypes transforms ./fixtures/function/multiple-annotations.ts 1`] = `
"import _pt from 'prop-types';
import React from 'react';
export interface AProps {
  a: number;
}
export const AProps = {
  a: _pt.number.isRequired
};
export interface BProps {
  b: boolean;
}
export const BProps = {
  b: _pt.bool.isRequired
};
export default function FuncMultipleAnnotations(props: AProps & BProps) {
  return null;
}"
`;

exports[`babel-plugin-ts-definitions-to-proptypes transforms ./fixtures/function/no-annotations.ts 1`] = `
"import React from 'react';
export default function FuncNoAnnotations(props) {
  return null;
}"
`;

exports[`babel-plugin-ts-definitions-to-proptypes transforms ./fixtures/function/no-export.ts 1`] = `
"import _pt from 'prop-types';
import React from 'react';
interface Props {
  name: string;
}
const Props = {
  name: _pt.string.isRequired
};

function FuncNoExport(props: Props) {
  return null;
}"
`;

exports[`babel-plugin-ts-definitions-to-proptypes transforms ./fixtures/function/no-react-import.ts 1`] = `
"interface Props {}
export default function FuncNoReactImport(props: Props) {
  return null;
}"
`;

exports[`babel-plugin-ts-definitions-to-proptypes transforms ./fixtures/function/no-type-propeties.ts 1`] = `
"import React from 'react';
interface Props {}
export default function FuncNoTypeProperties(props: Props) {
  return null;
}"
`;

exports[`babel-plugin-ts-definitions-to-proptypes transforms ./fixtures/function/standard.ts 1`] = `
"import _pt from 'prop-types';
import React from 'react';
interface Props {
  name: string;
}
const Props = {
  name: _pt.string.isRequired
};
export default function FuncStandard(props: Props) {
  return null;
}"
`;

exports[`babel-plugin-ts-definitions-to-proptypes transforms ./fixtures/hoc-component.ts 1`] = `
"import _pt from 'prop-types';
import React from 'react';
interface Props {
  name: string;
}
const Props = {
  name: _pt.string.isRequired
};
export function withClass() {
  return Component => {
    return HOCComponent;
  };
}
export function withFunction() {
  return Component => {
    function HOCFunc(props: Props) {
      return null;
    }

    return HOCFunc;
  };
}
export function withVar() {
  return Component => {
    const HOCVar: React.SFC<Props> = () => null;

    return HOCVar;
  };
}"
`;

exports[`babel-plugin-ts-definitions-to-proptypes transforms ./fixtures/hoc-component-returns.ts 1`] = `
"import _pt from 'prop-types';
import React from 'react';
interface Props {
  name: string;
}
const Props = {
  name: _pt.string.isRequired
};
export function withClass() {
  return Component => {};
}
export function withFunction() {
  return Component => function HOCFunc(props: Props) {
    return null;
  };
}
export function withVar() {
  return Component => {
    const HOCVar: React.SFC<Props> = () => null;

    return HOCVar;
  };
}"
`;

exports[`babel-plugin-ts-definitions-to-proptypes transforms ./fixtures/multiple-components.ts 1`] = `
"import _pt from 'prop-types';
import React from 'react';
interface AProps {
  foo: string;
}
const AProps = {
  foo: _pt.string.isRequired
};
interface BProps {
  bar: number;
}
const BProps = {
  bar: _pt.number.isRequired
};

function MultipleComponentsFunc(props: BProps) {
  return null;
}

interface CProps {
  bar: number;
}
const CProps = {
  bar: _pt.number.isRequired
};

const MultipleComponentsVar: React.SFC<CProps> = () => null;"
`;

exports[`babel-plugin-ts-definitions-to-proptypes transforms ./fixtures/nested-components.ts 1`] = `
"import _pt from 'prop-types';
import React from 'react';
interface AProps {
  foo: string;
}
const AProps = {
  foo: _pt.string.isRequired
};
interface BProps {
  bar: number;
}
const BProps = {
  bar: _pt.number.isRequired
};"
`;

exports[`babel-plugin-ts-definitions-to-proptypes transforms ./fixtures/no-prop-types-import.ts 1`] = `
"import _pt from 'prop-types';
import React from 'react';
export interface Props {
  name: string;
}
export const Props = {
  name: _pt.string.isRequired
};"
`;

exports[`babel-plugin-ts-definitions-to-proptypes transforms ./fixtures/no-remove-existing-prop-types-import.ts 1`] = `"import React from 'react';"`;

exports[`babel-plugin-ts-definitions-to-proptypes transforms ./fixtures/non-react-file.ts 1`] = `"export default function noop() {}"`;

exports[`babel-plugin-ts-definitions-to-proptypes transforms ./fixtures/prop-types-import.ts 1`] = `
"import React from 'react';
import PropTypes from 'prop-types';
export interface Props {
  name: string;
}
export const Props = {
  name: PropTypes.string.isRequired
};"
`;

exports[`babel-plugin-ts-definitions-to-proptypes transforms ./fixtures/react-import-namespace.ts 1`] = `
"import _pt from 'prop-types';
import * as React from 'react';
export interface Props {
  name: string;
}
export const Props = {
  name: _pt.string.isRequired
};"
`;

exports[`babel-plugin-ts-definitions-to-proptypes transforms ./fixtures/type-array.ts 1`] = `
"import _pt from 'prop-types';
import React from 'react';
export interface Props {
  any: any[];
  null: null[];
  numbers?: number[];
  strings: string[];
  booleans: boolean[];
  objects?: object[];
  union: (string | number)[];
  intersection: (string & number)[];
  nested?: string[][];
}
export const Props = {
  any: _pt.arrayOf(_pt.any).isRequired,
  null: _pt.array.isRequired,
  numbers: _pt.arrayOf(_pt.number),
  strings: _pt.arrayOf(_pt.string).isRequired,
  booleans: _pt.arrayOf(_pt.bool).isRequired,
  objects: _pt.arrayOf(_pt.object),
  union: _pt.arrayOf(_pt.oneOfType([_pt.string, _pt.number])).isRequired,
  intersection: _pt.arrayOf(_pt.oneOfType([_pt.string, _pt.number])).isRequired,
  nested: _pt.arrayOf(_pt.arrayOf(_pt.string))
};"
`;

exports[`babel-plugin-ts-definitions-to-proptypes transforms ./fixtures/type-builtins.ts 1`] = `
"import _pt from 'prop-types';
import React from 'react';
export interface Props {
  error: Error;
  errorOpt?: Error;
  date: Date;
  dateOpt?: Date;
  regexp: RegExp;
  regexpOpt?: RegExp;
  map: Map<string, number>;
  mapOpt?: WeakMap<object, number>;
  set: Set<number>;
  setOpt?: WeakSet<object>;
  promise: Promise<any>;
  promiseOpt?: Promise<any>;
  union: Error | Date | RegExp | null;
}
export const Props = {
  error: _pt.instanceOf(Error).isRequired,
  errorOpt: _pt.instanceOf(Error),
  date: _pt.instanceOf(Date).isRequired,
  dateOpt: _pt.instanceOf(Date),
  regexp: _pt.instanceOf(RegExp).isRequired,
  regexpOpt: _pt.instanceOf(RegExp),
  map: _pt.instanceOf(Map).isRequired,
  mapOpt: _pt.instanceOf(WeakMap),
  set: _pt.instanceOf(Set).isRequired,
  setOpt: _pt.instanceOf(WeakSet),
  promise: _pt.instanceOf(Promise).isRequired,
  promiseOpt: _pt.instanceOf(Promise),
  union: _pt.oneOfType([_pt.instanceOf(Error), _pt.instanceOf(Date), _pt.instanceOf(RegExp)]).isRequired
};"
`;

exports[`babel-plugin-ts-definitions-to-proptypes transforms ./fixtures/type-complex.ts 1`] = `
"import _pt from 'prop-types';
import React from 'react';
export interface Props {
  a: number;
  b?: string | boolean;
  c: 1 | 'foo' | false;
  d?: {
    name?: string;
  }[];
  e: {
    e1: string[][];
    e2: () => void;
    e3?: {
      e1a: object;
    } | null;
  };
  f?: any;
  g: ((e: Event) => null) | (() => {});
  h?: {
    [key: string]: number;
  } & {
    [key: string]: string[];
  };
}
export const Props = {
  a: _pt.number.isRequired,
  b: _pt.oneOfType([_pt.string, _pt.bool]),
  c: _pt.oneOf([1, 'foo', false]).isRequired,
  d: _pt.arrayOf(_pt.shape({
    name: _pt.string
  })),
  e: _pt.shape({
    e1: _pt.arrayOf(_pt.arrayOf(_pt.string)).isRequired,
    e2: _pt.func.isRequired,
    e3: _pt.oneOfType([_pt.shape({
      e1a: _pt.object.isRequired
    })])
  }).isRequired,
  f: _pt.any,
  g: _pt.oneOfType([_pt.func, _pt.func]).isRequired,
  h: _pt.oneOfType([_pt.objectOf(_pt.number), _pt.objectOf(_pt.arrayOf(_pt.string))])
};"
`;

exports[`babel-plugin-ts-definitions-to-proptypes transforms ./fixtures/type-enum.ts 1`] = `
"import _pt from 'prop-types';
import React from 'react';
export interface Props {
  union: number | string | object;
  intersection?: number & string & object;
  combined: number & (string | object);
  strUnion?: 'foo' | 'bar' | 'baz';
  strIntersection: 'foo' & 'bar' & 'baz';
  numUnion: 1 | 2 | 3;
  numIntersection?: 1 & 2 & 3;
}
export const Props = {
  union: _pt.oneOfType([_pt.number, _pt.string, _pt.object]).isRequired,
  intersection: _pt.oneOfType([_pt.number, _pt.string, _pt.object]),
  combined: _pt.oneOfType([_pt.number, _pt.oneOfType([_pt.string, _pt.object])]).isRequired,
  strUnion: _pt.oneOf(['foo', 'bar', 'baz']),
  strIntersection: _pt.oneOf(['foo', 'bar', 'baz']).isRequired,
  numUnion: _pt.oneOf([1, 2, 3]).isRequired,
  numIntersection: _pt.oneOf([1, 2, 3])
};"
`;

exports[`babel-plugin-ts-definitions-to-proptypes transforms ./fixtures/type-function.ts 1`] = `
"import _pt from 'prop-types';
import React from 'react';
export interface Props {
  void: () => void;
  objReturn: () => {};
  typeReturn?: () => string;
  args: (a: number, b: boolean) => null;
  parens?: (() => void);
  handler: React.ChangeEventHandler;
}
export const Props = {
  void: _pt.func.isRequired,
  objReturn: _pt.func.isRequired,
  typeReturn: _pt.func,
  args: _pt.func.isRequired,
  parens: _pt.func,
  handler: _pt.func.isRequired
};"
`;

exports[`babel-plugin-ts-definitions-to-proptypes transforms ./fixtures/type-object.ts 1`] = `
"import _pt from 'prop-types';
import React from 'react';
export interface Props {
  object: object;
  empty: {};
  index?: {
    [key: string]: number;
  };
  shape: {
    id: number;
    name?: string;
    status: 'active' | 'pending';
  };
}
export const Props = {
  object: _pt.object.isRequired,
  empty: _pt.object.isRequired,
  index: _pt.objectOf(_pt.number),
  shape: _pt.shape({
    id: _pt.number.isRequired,
    name: _pt.string,
    status: _pt.oneOf(['active', 'pending']).isRequired
  }).isRequired
};"
`;

exports[`babel-plugin-ts-definitions-to-proptypes transforms ./fixtures/type-primitives.ts 1`] = `
"import _pt from 'prop-types';
import React from 'react';
export interface Props {
  any: any;
  number: number;
  string: string;
  boolean: boolean;
  symbol: symbol;
  anyOpt?: any;
  numberOpt?: number;
  stringOpt?: string;
  booleanOpt?: boolean;
  symbolOpt?: symbol;
}
export const Props = {
  any: _pt.any.isRequired,
  number: _pt.number.isRequired,
  string: _pt.string.isRequired,
  boolean: _pt.bool.isRequired,
  symbol: _pt.symbol.isRequired,
  anyOpt: _pt.any,
  numberOpt: _pt.number,
  stringOpt: _pt.string,
  booleanOpt: _pt.bool,
  symbolOpt: _pt.symbol
};"
`;

exports[`babel-plugin-ts-definitions-to-proptypes transforms ./fixtures/type-react.ts 1`] = `
"import _pt from 'prop-types';
import React, { ReactText, ReactNode, ReactType, ComponentType, ComponentClass, StatelessComponent, MouseEvent, ReactElement, SFCElement } from 'react';
export interface Props {
  text: React.ReactText;
  textAlias?: ReactText;
  node: React.ReactNode;
  nodeAlias?: ReactNode;
  type: React.ReactType;
  typeAlias?: ReactType;
  comp: React.ComponentType;
  compGeneric?: React.ComponentType<any>;
  compAlias: ComponentType;
  cls: React.ComponentClass;
  clsGeneric?: React.ComponentClass<any>;
  clsAlias: ComponentClass;
  sfc: React.StatelessComponent;
  sfcGeneric?: React.StatelessComponent<any>;
  sfcAlias: StatelessComponent;
  el: React.ReactElement<any>;
  elAlias?: ReactElement<any>;
  sfcEl: React.SFCElement<any>;
  sfcElAlias?: SFCElement<any>;
  jsx: JSX.Element;
  event: React.MouseEvent;
  eventAlias?: MouseEvent;
  ref: React.Ref<any>;
}
export const Props = {
  text: _pt.node.isRequired,
  textAlias: _pt.node,
  node: _pt.node.isRequired,
  nodeAlias: _pt.node,
  type: _pt.node.isRequired,
  typeAlias: _pt.node,
  comp: _pt.func.isRequired,
  compGeneric: _pt.func,
  compAlias: _pt.func.isRequired,
  cls: _pt.func.isRequired,
  clsGeneric: _pt.func,
  clsAlias: _pt.func.isRequired,
  sfc: _pt.func.isRequired,
  sfcGeneric: _pt.func,
  sfcAlias: _pt.func.isRequired,
  el: _pt.element.isRequired,
  elAlias: _pt.element,
  sfcEl: _pt.element.isRequired,
  sfcElAlias: _pt.element,
  jsx: _pt.element.isRequired,
  event: _pt.object.isRequired,
  eventAlias: _pt.object,
  ref: _pt.oneOfType([_pt.string, _pt.func, _pt.object]).isRequired
};"
`;

exports[`babel-plugin-ts-definitions-to-proptypes transforms ./fixtures/var/custom-react-import-name.ts 1`] = `
"import _pt from 'prop-types';
import R from 'react';
interface Props {
  name: string;
}
const Props = {
  name: _pt.string.isRequired
};

const VarCustomReactImportName: R.SFC<Props> = () => null;

export default VarCustomReactImportName;"
`;

exports[`babel-plugin-ts-definitions-to-proptypes transforms ./fixtures/var/default-props.ts 1`] = `
"import _pt from 'prop-types';
import React from 'react';
interface Props {
  name: string;
}
const Props = {
  name: _pt.string.isRequired
};

const VarDefaultProps: React.SFC<Props> = () => null;

VarDefaultProps.defaultProps = {
  name: 'Foo'
};
export default VarDefaultProps;"
`;

exports[`babel-plugin-ts-definitions-to-proptypes transforms ./fixtures/var/export-default.ts 1`] = `
"import _pt from 'prop-types';
import React from 'react';
interface Props {
  name: string;
}
const Props = {
  name: _pt.string.isRequired
};

const VarExportDefault: React.SFC<Props> = () => null;

export default VarExportDefault;"
`;

exports[`babel-plugin-ts-definitions-to-proptypes transforms ./fixtures/var/export-named.ts 1`] = `
"import _pt from 'prop-types';
import React from 'react';
interface Props {
  name: string;
}
const Props = {
  name: _pt.string.isRequired
};
export const VarExportNamed: React.SFC<Props> = () => null;"
`;

exports[`babel-plugin-ts-definitions-to-proptypes transforms ./fixtures/var/extended-interfaces.ts 1`] = `
"import _pt from 'prop-types';
import React from 'react';
export interface AProps {
  a: number;
}
export const AProps = {
  a: _pt.number.isRequired
};
export interface BProps {
  b: boolean;
}
export const BProps = {
  b: _pt.bool.isRequired
};
export interface Props extends AProps, BProps {
  name: string;
}
export const Props = {
  a: _pt.number.isRequired,
  b: _pt.bool.isRequired,
  name: _pt.string.isRequired
};

const VarExtendedInterfaces: React.SFC<Props> = () => null;

export default VarExtendedInterfaces;"
`;

exports[`babel-plugin-ts-definitions-to-proptypes transforms ./fixtures/var/extended-type-aliases.ts 1`] = `
"import _pt from 'prop-types';
import React from 'react';
export type AProps = {
  a: number;
};
export const AProps = {
  a: _pt.number.isRequired
};
export type BProps = {
  b: boolean;
};
export const BProps = {
  b: _pt.bool.isRequired
};
export type Props = AProps & BProps & {
  name: string;
};
export const Props = {
  a: _pt.number.isRequired,
  b: _pt.bool.isRequired,
  name: _pt.string.isRequired
};

const VarExtendedTypeAliases: React.SFC<Props> = () => null;

export default VarExtendedTypeAliases;"
`;

exports[`babel-plugin-ts-definitions-to-proptypes transforms ./fixtures/var/merge-with-existing-proptypes.ts 1`] = `
"import React from 'react';
import PropTypes from 'prop-types';
interface Props {
  name: string;
}
const Props = {
  name: PropTypes.string.isRequired
};

const VarMergeWithExistingPropTypes: React.SFC<Props> = () => null;

VarMergeWithExistingPropTypes.propTypes = {
  custom: PropTypes.number.isRequired
};
export default VarMergeWithExistingPropTypes;"
`;

exports[`babel-plugin-ts-definitions-to-proptypes transforms ./fixtures/var/merge-with-no-override.ts 1`] = `
"import React from 'react';
import PropTypes from 'prop-types';
interface Props {
  name: string;
}
const Props = {
  name: PropTypes.string.isRequired
};
const CustomShape = PropTypes.string;

const VarMergeWithNoOverride: React.SFC<Props> = () => null;

VarMergeWithNoOverride.propTypes = {
  name: CustomShape.isRequired
};
export default VarMergeWithNoOverride;"
`;

exports[`babel-plugin-ts-definitions-to-proptypes transforms ./fixtures/var/missing-type.ts 1`] = `
"import React from 'react';

const VarMissingType: React.SFC<Props> = () => null;

export default VarMissingType;"
`;

exports[`babel-plugin-ts-definitions-to-proptypes transforms ./fixtures/var/multiple-annotations.ts 1`] = `
"import _pt from 'prop-types';
import React from 'react';
export interface AProps {
  a: number;
}
export const AProps = {
  a: _pt.number.isRequired
};
export interface BProps {
  b: boolean;
}
export const BProps = {
  b: _pt.bool.isRequired
};

const VarMultipleAnnotations: React.SFC<AProps & BProps> = () => null;

export default VarMultipleAnnotations;"
`;

exports[`babel-plugin-ts-definitions-to-proptypes transforms ./fixtures/var/no-annotations.ts 1`] = `
"import React from 'react';

const VarNoAnnotations: React.SFC = () => null;

export default VarNoAnnotations;"
`;

exports[`babel-plugin-ts-definitions-to-proptypes transforms ./fixtures/var/no-export.ts 1`] = `
"import _pt from 'prop-types';
import React from 'react';
interface Props {
  name: string;
}
const Props = {
  name: _pt.string.isRequired
};

const VarNoExport: React.SFC<Props> = () => null;"
`;

exports[`babel-plugin-ts-definitions-to-proptypes transforms ./fixtures/var/no-react-import.ts 1`] = `
"interface Props {}

const VarNoReactImport: React.SFC<Props> = () => null;

export default VarNoReactImport;"
`;

exports[`babel-plugin-ts-definitions-to-proptypes transforms ./fixtures/var/no-type-propeties.ts 1`] = `
"import React from 'react';
interface Props {}

const VarNoTypeProperties: React.SFC<Props> = () => null;

export default VarNoTypeProperties;"
`;

exports[`babel-plugin-ts-definitions-to-proptypes transforms ./fixtures/var/standard.ts 1`] = `
"import _pt from 'prop-types';
import React from 'react';
interface Props {
  name: string;
}
const Props = {
  name: _pt.string.isRequired
};

const VarStandard: React.SFC<Props> = () => null;

export default VarStandard;"
`;

exports[`babel-plugin-ts-definitions-to-proptypes works correctly when file is JSX/TSX 1`] = `
"import _pt from 'prop-types';
import React from 'react';
export const Props = {
  name: _pt.string.isRequired
};"
`;

exports[`babel-plugin-ts-definitions-to-proptypes works correctly when transpiling down to ES3 1`] = `
"'use strict';

var _propTypes = _interopRequireDefault(require('prop-types'));

var _react = _interopRequireDefault(require('react'));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Props = {
  name: _propTypes.default.string.isRequired
};"
`;

exports[`babel-plugin-ts-definitions-to-proptypes works correctly when transpiling down to ES3 2`] = `
"'use strict';

var _propTypes = _interopRequireDefault(require('prop-types'));

var _react = _interopRequireDefault(require('react'));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Props = {
  name: _propTypes.default.string.isRequired
};"
`;

exports[`babel-plugin-ts-definitions-to-proptypes works correctly when transpiling down to ES5 1`] = `
"'use strict';

var _propTypes = _interopRequireDefault(require('prop-types'));

var _react = _interopRequireDefault(require('react'));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Props = {
  name: _propTypes.default.string.isRequired
};"
`;

exports[`babel-plugin-ts-definitions-to-proptypes works correctly when transpiling down to ES5 2`] = `
"'use strict';

var _propTypes = _interopRequireDefault(require('prop-types'));

var _react = _interopRequireDefault(require('react'));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Props = {
  name: _propTypes.default.string.isRequired
};"
`;

exports[`babel-plugin-ts-definitions-to-proptypes works correctly when transpiling down to ES6 1`] = `
"'use strict';

var _propTypes = _interopRequireDefault(require('prop-types'));

var _react = _interopRequireDefault(require('react'));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

interface Props {
  name: string;
}
const Props = {
  name: _propTypes.default.string.isRequired
};"
`;

exports[`babel-plugin-ts-definitions-to-proptypes works correctly when transpiling down to ES6 2`] = `
"'use strict';

var _propTypes = _interopRequireDefault(require('prop-types'));

var _react = _interopRequireDefault(require('react'));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

interface Props {
  name: string;
}
const Props = {
  name: _propTypes.default.string.isRequired
};"
`;

exports[`babel-plugin-ts-definitions-to-proptypes works correctly when using ALL the things 1`] = `
"'use strict';

var _interopRequireDefault = require('@babel/runtime/helpers/interopRequireDefault');

var _propTypes = _interopRequireDefault(require('prop-types'));

var _react = _interopRequireDefault(require('react'));

const Props = {
  name: _propTypes.default.string.isRequired
};"
`;

exports[`babel-plugin-ts-definitions-to-proptypes works correctly when using ALL the things 2`] = `
"'use strict';

var _interopRequireDefault = require('@babel/runtime/helpers/interopRequireDefault');

var _propTypes = _interopRequireDefault(require('prop-types'));

var _react = _interopRequireDefault(require('react'));

const Props = {
  name: _propTypes.default.string.isRequired
};"
`;

exports[`babel-plugin-ts-definitions-to-proptypes works correctly when using the transform runtime 1`] = `
"import _pt from 'prop-types';
import React from 'react';
const Props = {
  name: _pt.string.isRequired
};"
`;

exports[`babel-plugin-ts-definitions-to-proptypes works correctly when using the typescript preset 1`] = `
"import _pt from 'prop-types';
import React from 'react';
const Props = {
  name: _pt.string.isRequired
};"
`;
